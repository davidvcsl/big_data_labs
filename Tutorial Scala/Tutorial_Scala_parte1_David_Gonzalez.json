{"paragraphs":[{"text":"val baseDir=\"https://cs.famaf.unc.edu.ar/~damian/bigdata/curso/posgrado_optativa/lectivo/presentaciones/03_rdd_notebook\"\nprint(\"\"\"%html\n<center>\n    <h1>ProgramaciÃ³n Distribuida sobre Grandes VolÃºmenes de Datos</h1>\n</center>\n\n<br>\n\n<h3 style=\"text-align:center;\">\n    <a href=\"http://www.famaf.unc.edu.ar\">\n    Facultad de MatemÃ¡tica AstronomÃ­a FÃ­sica y ComputaciÃ³n\n    </a>\n<br/>\n    <a href=\"http://www.unc.edu.ar\">\n    Universidad Nacional de CÃ³rdoba\n    </a>\n<br/>\n    <center>\n    <a href=\"http://www.famaf.unc.edu.ar\">\n    <img src=\"https://cs.famaf.unc.edu.ar/~damian/bigdata/curso/posgrado_optativa/lectivo/presentaciones/comun/logo%20UNC%20FAMAF%202016.svg\" alt=\"Drawing\" style=\"width:50%;\"/>\n    </a>\n    </center>\n</h3>\n\n<h4 style=\"text-align:center;\"> DamiÃ¡n Barsotti - Ezequiel Orbe </h4>\n\n<p style=\"font-size:15px;\">\n    <br />\n        This work is licensed under a\n        <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.\n    <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">\n        <img alt=\"Creative Commons License\" style=\"border-width:0;vertical-align:middle;float:right\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" />\n    </a>\n</p>\n\"\"\")\n","dateUpdated":"2017-08-17T12:48:30-0300","config":{"enabled":false,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"editorMode":"ace/mode/scala","editorHide":true,"colWidth":12,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<center>\n    <h1>ProgramaciÃ³n Distribuida sobre Grandes VolÃºmenes de Datos</h1>\n</center>\n\n<br>\n\n<h3 style=\"text-align:center;\">\n    <a href=\"http://www.famaf.unc.edu.ar\">\n    Facultad de MatemÃ¡tica AstronomÃ­a FÃ­sica y ComputaciÃ³n\n    </a>\n<br/>\n    <a href=\"http://www.unc.edu.ar\">\n    Universidad Nacional de CÃ³rdoba\n    </a>\n<br/>\n    <center>\n    <a href=\"http://www.famaf.unc.edu.ar\">\n    <img src=\"https://cs.famaf.unc.edu.ar/~damian/bigdata/curso/posgrado_optativa/lectivo/presentaciones/comun/logo%20UNC%20FAMAF%202016.svg\" alt=\"Drawing\" style=\"width:50%;\"/>\n    </a>\n    </center>\n</h3>\n\n<h4 style=\"text-align:center;\"> DamiÃ¡n Barsotti - Ezequiel Orbe </h4>\n\n<p style=\"font-size:15px;\">\n    <br />\n        This work is licensed under a\n        <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.\n    <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">\n        <img alt=\"Creative Commons License\" style=\"border-width:0;vertical-align:middle;float:right\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" />\n    </a>\n</p>\n"}]},"apps":[],"jobName":"paragraph_1502984910633_1660908894","id":"20160817-081203_553106990","dateCreated":"2017-08-17T12:48:30-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:256"},{"text":"%md #Tutorial Scala (parte 1)\n\nEste tutorial de `scala` ayudarÃ¡ a entender los conceptos bÃ¡sicos para programar en este lenguaje.\nSe presentarÃ¡n los temas con la posibilidad de ejecutar y modificar los ejemplos en la misma pÃ¡gina de lectura para que puedas probar y familiarizarte con el lenguaje.\n\n####Uso del notebook\n\n* Para ejecutar los programa presiona **[`Shift`]-[`Enter`]** o cliquea en el triangulito arriba a la derecha de cada celda.\n* Tambien podes copiar los programas dados en este notebook a un archivo y correrlo con un interprete `scala` con el siguiente comando `:load <nombre de archivo.scala>`.\n* Para hacer copy and paste desde el notebook selecciona con **[`Ctrl`]-[*flechitas*]** y hacer **[`Ctrl`]-[`c`]** y **[`Ctrl`]-[`v`]**.","dateUpdated":"2017-08-17T12:48:30-0300","config":{"enabled":false,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"editorMode":"ace/mode/scala","editorHide":true,"colWidth":12,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Tutorial Scala (parte 1)</h1>\n<p>Este tutorial de <code>scala</code> ayudarÃ¡ a entender los conceptos bÃ¡sicos para programar en este lenguaje.\n<br  />Se presentarÃ¡n los temas con la posibilidad de ejecutar y modificar los ejemplos en la misma pÃ¡gina de lectura para que puedas probar y familiarizarte con el lenguaje.</p>\n<h4>Uso del notebook</h4>\n<ul>\n<li>Para ejecutar los programa presiona <strong>[<code>Shift</code>]-[<code>Enter</code>]</strong> o cliquea en el triangulito arriba a la derecha de cada celda.</li>\n<li>Tambien podes copiar los programas dados en este notebook a un archivo y correrlo con un interprete <code>scala</code> con el siguiente comando <code>:load &lt;nombre de archivo.scala&gt;</code>.</li>\n<li>Para hacer copy and paste desde el notebook selecciona con <strong>[<code>Ctrl</code>]-[<em>flechitas</em>]</strong> y hacer <strong>[<code>Ctrl</code>]-[<code>c</code>]</strong> y <strong>[<code>Ctrl</code>]-[<code>v</code>]</strong>.</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1502984910635_1661678392","id":"20160817-081320_1105843555","dateCreated":"2017-08-17T12:48:30-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:257"},{"text":"%md ##CaracterÃ­sticas Principales del Lenguaje","dateUpdated":"2017-08-17T12:48:30-0300","config":{"enabled":false,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>CaracterÃ­sticas Principales del Lenguaje</h2>\n"}]},"apps":[],"jobName":"paragraph_1502984910635_1661678392","id":"20160817-081732_753026246","dateCreated":"2017-08-17T12:48:30-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:258"},{"title":"CaracterÃ­sticas Principales","text":"%md \n- `scala` (**scala**lable language) es un lenguaje desarrollado desde 2001 en el Programming Methods Laboratory de la EPFL bajo la direcciÃ³n de [Martin Odersky](https://en.wikipedia.org/wiki/Martin_Odersky).\n\n- Fue diseÃ±ado con el objetivo de permitir su crecimiento en funciÃ³n a las necesidades de sus usuarios (de allÃ­ su nombre).\n\n- Combina conceptos de programaciÃ³n funcional y programaciÃ³n orientada a objetos en un lenguaje con **[tipado estÃ¡tico](http://stackoverflow.com/questions/1517582/what-is-the-difference-between-statically-typed-and-dynamically-typed-languages)**.\n\n- **Es** un lenguaje orientado a objetos puro (como Smalltalk) en el cual todo valor es un objeto y toda operaciÃ³n es una llamada a un mÃ©todo.\n\n- **No** es un lenguaje funcional puro (como Haskell) que fuerza a programar en un estilo funcional. \n\n-  Es un hÃ­brido imperativo/funcional que permite programar en un estilo imperativo, aunque sugiere adoptar un estilo funcional.\n\n- Corre en la plataforma  JAVA e interopera con todas las librerÃ­as JAVA.\n\n- BibliografÃ­a recomendada: \n    - **[Programming in Scala](http://booksites.artima.com/programming_in_scala_3ed)** (Martin Odersky, Lex Spoon, and Bill Venners) \n    - **[DocumentaciÃ³n Oficial de Scala](http://www.scala-lang.org/documentation/)**\n","dateUpdated":"2017-08-17T12:48:30-0300","config":{"enabled":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<ul>\n<li><p><code>scala</code> (<strong>scala</strong>lable language) es un lenguaje desarrollado desde 2001 en el Programming Methods Laboratory de la EPFL bajo la direcciÃ³n de <a href=\"https://en.wikipedia.org/wiki/Martin_Odersky\">Martin Odersky</a>.</p>\n</li>\n<li><p>Fue diseÃ±ado con el objetivo de permitir su crecimiento en funciÃ³n a las necesidades de sus usuarios (de allÃ­ su nombre).</p>\n</li>\n<li><p>Combina conceptos de programaciÃ³n funcional y programaciÃ³n orientada a objetos en un lenguaje con <strong><a href=\"http://stackoverflow.com/questions/1517582/what-is-the-difference-between-statically-typed-and-dynamically-typed-languages\">tipado estÃ¡tico</a></strong>.</p>\n</li>\n<li><p><strong>Es</strong> un lenguaje orientado a objetos puro (como Smalltalk) en el cual todo valor es un objeto y toda operaciÃ³n es una llamada a un mÃ©todo.</p>\n</li>\n<li><p><strong>No</strong> es un lenguaje funcional puro (como Haskell) que fuerza a programar en un estilo funcional.</p>\n</li>\n<li><p>Es un hÃ­brido imperativo/funcional que permite programar en un estilo imperativo, aunque sugiere adoptar un estilo funcional.</p>\n</li>\n<li><p>Corre en la plataforma  JAVA e interopera con todas las librerÃ­as JAVA.</p>\n</li>\n<li><p>BibliografÃ­a recomendada:</p>\n<ul>\n<li><strong><a href=\"http://booksites.artima.com/programming_in_scala_3ed\">Programming in Scala</a></strong> (Martin Odersky, Lex Spoon, and Bill Venners)</li>\n<li><strong><a href=\"http://www.scala-lang.org/documentation/\">DocumentaciÃ³n Oficial de Scala</a></strong></li>\n</ul>\n</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1502984910636_1659754647","id":"20160703-233826_1193307973","dateCreated":"2017-08-17T12:48:30-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259"},{"title":"Variables","text":"%md ##Variables","dateUpdated":"2017-08-17T12:48:30-0300","config":{"enabled":false,"tableHide":false,"title":false,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Variables</h2>\n"}]},"apps":[],"jobName":"paragraph_1502984910637_1659369899","id":"20160817-002635_1001761052","dateCreated":"2017-08-17T12:48:30-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:260"},{"title":"","text":"%md\n- `scala` tiene dos tipos de variables: `vars` y `vals`.\n\n- Un variable `val` (a veces llamada directamente `valor`) es inmutable y no puede ser reasignada una vez inicializada.\n\t \n- Una variable `var`, por el contrario, es mutable y puede ser reasignada.\n\n- Al momento de declarar variables siempre hay que inicializarlas.\n\n---\n - El tipo de una variable se especifica luego del nombre de la misma separado por `:` (e.g.:`var x : <type>`)\n \n - El compilador `scala` hace **inferencia de tipos** por lo cual se pueden evitar las anotaciones de tipos.\n\n- Para mantener el cÃ³digo limpio, se recomienda evitar las anotaciones de tipos que no sean necesarias y dejar que el compilador los infiera.\n\n---\n- Es posible declarar y asignar mÃºltiples variables al mismo tiempo.\n\n- Se pueden inicializar mÃºltiples variables usando tuplas.","dateUpdated":"2017-08-17T12:48:30-0300","config":{"enabled":false,"title":false,"results":[{"graph":{"mode":"table","height":492,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<ul>\n<li><p><code>scala</code> tiene dos tipos de variables: <code>vars</code> y <code>vals</code>.</p>\n</li>\n<li><p>Un variable <code>val</code> (a veces llamada directamente <code>valor</code>) es inmutable y no puede ser reasignada una vez inicializada.</p>\n</li>\n<li><p>Una variable <code>var</code>, por el contrario, es mutable y puede ser reasignada.</p>\n</li>\n<li><p>Al momento de declarar variables siempre hay que inicializarlas.</p>\n</li>\n</ul>\n<hr />\n<ul>\n<li><p>El tipo de una variable se especifica luego del nombre de la misma separado por <code>:</code> (e.g.:<code>var x : &lt;type&gt;</code>)</p>\n</li>\n<li><p>El compilador <code>scala</code> hace <strong>inferencia de tipos</strong> por lo cual se pueden evitar las anotaciones de tipos.</p>\n</li>\n<li><p>Para mantener el cÃ³digo limpio, se recomienda evitar las anotaciones de tipos que no sean necesarias y dejar que el compilador los infiera.</p>\n</li>\n</ul>\n<hr />\n<ul>\n<li><p>Es posible declarar y asignar mÃºltiples variables al mismo tiempo.</p>\n</li>\n<li><p>Se pueden inicializar mÃºltiples variables usando tuplas.</p>\n</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1502984910638_1660524145","id":"20160704-210357_412606283","dateCreated":"2017-08-17T12:48:30-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:261"},{"title":"Variables VAL","text":"//Â¿funciona?\nval x:Int = 2\nx = 3\n//No funciona ya que no se puede modificar variables de tipo val","user":"anonymous","dateUpdated":"2017-08-19T13:45:57-0300","config":{"enabled":true,"title":true,"tableHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":6,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"\nx: Int = 2\n\n\n\n<console>:27: error: reassignment to val\n       x = 3\n         ^\n"}]},"apps":[],"jobName":"paragraph_1502984910639_1660139396","id":"20160704-213534_1142623231","dateCreated":"2017-08-17T12:48:30-0300","dateStarted":"2017-08-19T13:44:40-0300","dateFinished":"2017-08-19T13:45:01-0300","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:262"},{"title":"Variables VAR","text":"//Â¿funciona?\nvar x:Int = 2\nx = 3\n//Funciona ya que x es de tipo var","dateUpdated":"2017-08-19T13:46:12-0300","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":6,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1502984910640_1670527617","id":"20160704-213754_1736162540","dateCreated":"2017-08-17T12:48:30-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:263","user":"anonymous","dateFinished":"2017-08-19T13:45:59-0300","dateStarted":"2017-08-19T13:45:59-0300","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nx: Int = 2\n\nx: Int = 3\n"}]}},{"title":"Inferencia de Tipos","text":"//Â¿que tipos tienen las variables?\nval x = 2 //int\nval y = \"Scala!\" //string\nval z = List(1,2,3) //List[Int]","user":"anonymous","dateUpdated":"2017-08-19T13:47:20-0300","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":6,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nx: Int = 2\n\ny: String = Scala!\n\nz: List[Int] = List(1, 2, 3)\n"}]},"apps":[],"jobName":"paragraph_1502984910641_1670142868","id":"20160704-214246_1274038938","dateCreated":"2017-08-17T12:48:30-0300","dateStarted":"2017-08-19T13:46:45-0300","dateFinished":"2017-08-19T13:46:46-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:264"},{"title":"Declaraciones mÃºltiples","text":"//Â¿que valores toman x,y,z en cada caso?\n var x, y, z = 0 //Todas 0\n var (x, y, z) = (1, 2, 3) //1,2,3 respectivamente\n ","user":"anonymous","dateUpdated":"2017-08-19T13:46:45-0300","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":6,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n\n\nx: Int = 0\ny: Int = 0\nz: Int = 0\n\n\n\nx: Int = 1\ny: Int = 2\nz: Int = 3\n"}]},"apps":[],"jobName":"paragraph_1502984910642_1671297114","id":"20160704-232318_690063668","dateCreated":"2017-08-17T12:48:30-0300","dateStarted":"2017-08-19T13:46:12-0300","dateFinished":"2017-08-19T13:46:13-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:265"},{"title":"Funciones","text":"%md ##Funciones","dateUpdated":"2017-08-17T12:48:30-0300","config":{"enabled":false,"title":false,"tableHide":false,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Funciones</h2>\n"}]},"apps":[],"jobName":"paragraph_1502984910643_1670912366","id":"20160816-205355_75257690","dateCreated":"2017-08-17T12:48:30-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:266"},{"title":"","text":"%md\n\n\n - La definiciÃ³n de una funciÃ³n comienza con la palabra clave `def` seguida por el nombre de la funciÃ³n y por una lista, separada por comas, de los parÃ¡metros de la funciÃ³n entre parÃ©ntesis.\n \n - Una anotaciÃ³n de tipo debe seguir a cada parÃ¡metro ya que el compilador no hace inferencia sobre los tipos de los parÃ¡metros.\n \n - Opcionalmente se puede indicar explÃ­citamente el tipo que retorna la funciÃ³n luego de la lista de parÃ¡metros. Si no se indica el tipo, el compilador lo inferirÃ¡.\n \n- Si la funciÃ³n es recursiva **siempre** se debe indicar el tipo que retorna.\n\n- El cuerpo de una funciÃ³n estÃ¡ delimitado por llaves  `{ <body> }`. Si la funciÃ³n solo contiene una sentencia, se pueden omitir las llaves. \n\n- Por defecto, una funciÃ³n retorna el valor de la Ãºltima expresiÃ³n en su cuerpo y se puede omitir la palabra clave `return`. Si en cambio se quiere retornar un valor distinto al de la Ãºltima expresiÃ³n entonces se debe especificar con `return`. \n\n- Una funciÃ³n que retorna `Unit` no retorna un valor interesante y solo se ejecuta por sus efectos secundarios. `Unit` es el equivalente a `void` en C y Java. \n\n ---\n \n - Se pueden definir funciones dentro de otras funciones. Estas funciones anidadas son visibles solo dentro del bloque donde se las declara y pueden acceder a los parÃ¡metros de la funciÃ³n que las contiene.\n \n - `scala` tambiÃ©n soporta: lista de parÃ¡metros de longitud variable, parÃ¡metros nombrados y valores por defecto. \n \n - `scala` tambiÃ©n realiza la optimizaciÃ³n de recursiÃ³n a la cola (tail-recursion optimization). \n ","dateUpdated":"2017-08-17T12:48:30-0300","config":{"enabled":false,"title":false,"results":[{"graph":{"mode":"table","height":95,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<ul>\n<li><p>La definiciÃ³n de una funciÃ³n comienza con la palabra clave <code>def</code> seguida por el nombre de la funciÃ³n y por una lista, separada por comas, de los parÃ¡metros de la funciÃ³n entre parÃ©ntesis.</p>\n</li>\n<li><p>Una anotaciÃ³n de tipo debe seguir a cada parÃ¡metro ya que el compilador no hace inferencia sobre los tipos de los parÃ¡metros.</p>\n</li>\n<li><p>Opcionalmente se puede indicar explÃ­citamente el tipo que retorna la funciÃ³n luego de la lista de parÃ¡metros. Si no se indica el tipo, el compilador lo inferirÃ¡.</p>\n</li>\n<li><p>Si la funciÃ³n es recursiva <strong>siempre</strong> se debe indicar el tipo que retorna.</p>\n</li>\n<li><p>El cuerpo de una funciÃ³n estÃ¡ delimitado por llaves  <code>{ &lt;body&gt; }</code>. Si la funciÃ³n solo contiene una sentencia, se pueden omitir las llaves.</p>\n</li>\n<li><p>Por defecto, una funciÃ³n retorna el valor de la Ãºltima expresiÃ³n en su cuerpo y se puede omitir la palabra clave <code>return</code>. Si en cambio se quiere retornar un valor distinto al de la Ãºltima expresiÃ³n entonces se debe especificar con <code>return</code>.</p>\n</li>\n<li><p>Una funciÃ³n que retorna <code>Unit</code> no retorna un valor interesante y solo se ejecuta por sus efectos secundarios. <code>Unit</code> es el equivalente a <code>void</code> en C y Java.</p>\n<hr />\n</li>\n<li><p>Se pueden definir funciones dentro de otras funciones. Estas funciones anidadas son visibles solo dentro del bloque donde se las declara y pueden acceder a los parÃ¡metros de la funciÃ³n que las contiene.</p>\n</li>\n<li><p><code>scala</code> tambiÃ©n soporta: lista de parÃ¡metros de longitud variable, parÃ¡metros nombrados y valores por defecto.</p>\n</li>\n<li><p><code>scala</code> tambiÃ©n realiza la optimizaciÃ³n de recursiÃ³n a la cola (tail-recursion optimization).</p>\n</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1502984910644_1668988621","id":"20160816-204514_471265966","dateCreated":"2017-08-17T12:48:30-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:267"},{"title":"DefiniciÃ³n de FunciÃ³n","text":"def max(x: Int, y: Int) : Int = {\n\tif (x > y)\n\t\tx\n\telse\n\t\ty\n}","user":"anonymous","dateUpdated":"2017-08-19T13:47:39-0300","config":{"enabled":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"editorMode":"ace/mode/scala","colWidth":6,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nmax: (x: Int, y: Int)Int\n"}]},"apps":[],"jobName":"paragraph_1502984910645_1668603872","id":"20160816-204813_1453918901","dateCreated":"2017-08-17T12:48:30-0300","dateStarted":"2017-08-19T13:47:39-0300","dateFinished":"2017-08-19T13:47:39-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:268"},{"title":"DefiniciÃ³n sin especificaciÃ³n de tipos de los Parametros","text":"//Â¿funciona?\ndef min(x, y) = {\n\tif (x > y)\n\t\tx\n\telse\n\t\ty\n} //No funciona ya que no se especifica el tipo de los parametros\n","user":"anonymous","dateUpdated":"2017-08-19T13:48:03-0300","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":6,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1502984910646_1669758119","id":"20160816-205047_1696755979","dateCreated":"2017-08-17T12:48:30-0300","dateStarted":"2017-08-19T13:47:47-0300","dateFinished":"2017-08-19T13:47:47-0300","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:269","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"\n\n\n<console>:2: error: ':' expected but ',' found.\ndef min(x, y) = {\n         ^\n"}]}},{"title":"DefiniciÃ³n omitiendo el tipo que se retorna","text":"//Â¿que tipo retorna?\ndef max(x: Int, y: Int) = {\n\tif (x > y)\n\t\tx\n\telse\n\t\ty\n} //Devuelve tipo Int","user":"anonymous","dateUpdated":"2017-08-19T13:48:14-0300","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":6,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nmax: (x: Int, y: Int)Int\n"}]},"apps":[],"jobName":"paragraph_1502984910647_1669373370","id":"20160816-205216_1228789597","dateCreated":"2017-08-17T12:48:30-0300","dateStarted":"2017-08-19T13:48:05-0300","dateFinished":"2017-08-19T13:48:05-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:270"},{"title":"FunciÃ³n recursiva","text":"//Â¿fuciona?\ndef inc(x: Int, n: Int) = {\n\tif (x < n)\n\t\tinc((x+1), n)\n\telse\n\t\tx\n} //No funciona ya que en llamadas recursivas se debe especificar el tipo que retorna","user":"anonymous","dateUpdated":"2017-08-19T13:48:37-0300","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":6,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"\n\n\n<console>:30: error: recursive method inc needs result type\n       \t\tinc((x+1), n)\n                ^\n"}]},"apps":[],"jobName":"paragraph_1502984910647_1669373370","id":"20160816-205308_433997936","dateCreated":"2017-08-17T12:48:30-0300","dateStarted":"2017-08-19T13:48:14-0300","dateFinished":"2017-08-19T13:48:14-0300","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:271"},{"title":"Funciones anidadas","text":"//Â¿Es visible buildString fuera de printFullName?\ndef printFullName(name: String, lastname: String) = {\n\tdef buildString() = {\n\t\t\"Hello \" + name + \" \" + lastname + \"!!\"\n\t}\n\tprintln(buildString)\n} //Solo es visible dentro del bloque donde es definida, por lo tanto no es visible desde afuera de printFullName\n","user":"anonymous","dateUpdated":"2017-08-19T13:49:18-0300","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":6,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nprintFullName: (name: String, lastname: String)Unit\n"}]},"apps":[],"jobName":"paragraph_1502984910648_1667449625","id":"20160816-223716_543125792","dateCreated":"2017-08-17T12:48:30-0300","dateStarted":"2017-08-19T13:48:37-0300","dateFinished":"2017-08-19T13:48:38-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:272"},{"title":"Uso del Return","text":"//Â¿que retorna?\ndef max2(x: Int, y: Int) = {\n\tif (x > y)\n\t\treturn x\n\telse\n\t\treturn y\n\t0\n} //Da error ya que al usar return hay que definir el tipo que devuelve la funcion","user":"anonymous","dateUpdated":"2017-08-19T13:49:49-0300","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":6,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"\n\n\n<console>:32: error: method max2 has return statement; needs result type\n       \t\treturn x\n                ^\n\n\n\n<console>:34: error: method max2 has return statement; needs result type\n       \t\treturn y\n                ^\n"}]},"apps":[],"jobName":"paragraph_1502984910649_1667064877","id":"20160816-205304_1477244175","dateCreated":"2017-08-17T12:48:30-0300","dateStarted":"2017-08-19T13:49:20-0300","dateFinished":"2017-08-19T13:49:20-0300","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:273"},{"title":"Nro. de parÃ¡metros variable","text":"//Â¿funciona? //Si\ndef echo(args: String*) =\n    for (arg <- args) println(arg)\n\necho(\"hola\")\necho(\"hola\", \"chau\")\n//parÃ¡metros nombrados.\n\n//parÃ¡metros por defecto.","user":"anonymous","dateUpdated":"2017-08-19T13:50:40-0300","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":6,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\necho: (args: String*)Unit\nhola\nhola\nchau\n"}]},"apps":[],"jobName":"paragraph_1502984910649_1667064877","id":"20160816-234315_448901351","dateCreated":"2017-08-17T12:48:30-0300","dateStarted":"2017-08-19T13:50:23-0300","dateFinished":"2017-08-19T13:50:23-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:274"},{"title":"Omitiendo las llaves","text":"//Â¿que tipo retorna? \ndef square(x: Int) = x*x //Retorna tipo Int","user":"anonymous","dateUpdated":"2017-08-19T13:50:56-0300","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":6,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nsquare: (x: Int)Int\n"}]},"apps":[],"jobName":"paragraph_1502984910650_1668219123","id":"20160816-205649_1284984828","dateCreated":"2017-08-17T12:48:30-0300","dateStarted":"2017-08-19T13:50:40-0300","dateFinished":"2017-08-19T13:50:40-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:275"},{"title":"Function Literals","text":"%md ##Function Literals","dateUpdated":"2017-08-17T12:48:30-0300","config":{"enabled":false,"title":false,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Function Literals</h2>\n"}]},"apps":[],"jobName":"paragraph_1502984910651_1667834374","id":"20160817-010628_484969835","dateCreated":"2017-08-17T12:48:30-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:276"},{"title":"Function Literals","text":"%md \n\n- En Scala las funciones son valores de primera clase (first-class values). No solo se pueden definir funciones, sino que tambiÃ©n se pueden definir literales de funciÃ³n (function literals) y tratarlas como valores.\n\n- Un **literal de funciÃ³n** se define especificando una lista de parÃ¡metros entre parÃ©ntesis, el sÃ­mbolo `=>`y el cuerpo de la funciÃ³n.\n- Si el cuerpo del literal de funciÃ³n contiene mÃ¡s de una sentencia se puede definir el cuerpo entre llaves. `{ <body> }`\n\n- Un literal de funciÃ³n se puede definir de forma concisa de la siguiente forma:\n\t- Omitiendo el tipo de los parÃ¡metros \n\t- Omitiendo los parÃ©ntesis.\n\t- Usando `_` como placeholder para uno o mÃ¡s parÃ¡metros.\n\t- MÃºltiples `_` implican mÃºltiples parÃ¡metros, no la reutilizaciÃ³n de un","dateUpdated":"2017-08-17T12:48:30-0300","config":{"enabled":false,"title":false,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<ul>\n<li><p>En Scala las funciones son valores de primera clase (first-class values). No solo se pueden definir funciones, sino que tambiÃ©n se pueden definir literales de funciÃ³n (function literals) y tratarlas como valores.</p>\n</li>\n<li><p>Un <strong>literal de funciÃ³n</strong> se define especificando una lista de parÃ¡metros entre parÃ©ntesis, el sÃ­mbolo <code>=&gt;</code>y el cuerpo de la funciÃ³n.</p>\n</li>\n<li><p>Si el cuerpo del literal de funciÃ³n contiene mÃ¡s de una sentencia se puede definir el cuerpo entre llaves. <code>{ &lt;body&gt; }</code></p>\n</li>\n<li><p>Un literal de funciÃ³n se puede definir de forma concisa de la siguiente forma:</p>\n<ul>\n<li>Omitiendo el tipo de los parÃ¡metros</li>\n<li>Omitiendo los parÃ©ntesis.</li>\n<li>Usando <code>_</code> como placeholder para uno o mÃ¡s parÃ¡metros.</li>\n<li>MÃºltiples <code>_</code> implican mÃºltiples parÃ¡metros, no la reutilizaciÃ³n de un</li>\n</ul>\n</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1502984910652_1665910630","id":"20160816-235432_58239161","dateCreated":"2017-08-17T12:48:30-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:277"},{"title":"DefiniciÃ³n de un function literal","text":"//Â¿que tipos retornan?\nvar increase = (x: Int) => x + 1 //Int\nvar sum = (x: Int, y: Int) => x + y //Int","user":"anonymous","dateUpdated":"2017-08-19T13:51:10-0300","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":6,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nincrease: Int => Int = <function1>\n\nsum: (Int, Int) => Int = <function2>\n"}]},"apps":[],"jobName":"paragraph_1502984910652_1665910630","id":"20160816-235521_448466848","dateCreated":"2017-08-17T12:48:30-0300","dateStarted":"2017-08-19T13:50:56-0300","dateFinished":"2017-08-19T13:50:56-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:278"},{"title":"Variantes sintÃ¡cticas","text":"val someNumbers = List(-2, -1, 0, 1, 2)\n\n//Â¿retornan lo mismo? //Si\nsomeNumbers.filter((x: Int) => x > 0)\nsomeNumbers.filter((x) => x > 0)\nsomeNumbers.filter(x => x > 0)\nsomeNumbers.filter(_ > 0)\n\n//Â¿porque funciona esto? //Porque los literales permiten el uso de _ como placeholder para parametros\nsomeNumbers.fold(0)(_+_)","user":"anonymous","dateUpdated":"2017-08-19T13:53:05-0300","config":{"enabled":true,"title":true,"tableHide":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":6,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nsomeNumbers: List[Int] = List(-2, -1, 0, 1, 2)\n\nres23: List[Int] = List(1, 2)\n\nres24: List[Int] = List(1, 2)\n\nres25: List[Int] = List(1, 2)\n\nres26: List[Int] = List(1, 2)\n\nres29: Int = 0\n"}]},"apps":[],"jobName":"paragraph_1502984910653_1665525881","id":"20160816-235858_384188929","dateCreated":"2017-08-17T12:48:30-0300","dateStarted":"2017-08-19T13:51:10-0300","dateFinished":"2017-08-19T13:51:11-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:279"},{"title":"Ejemplos","text":"def add1(x:Int, y:Int) = x + y // funciÃ³n\n\nval add2 = (x:Int, y:Int) => x + y //funciÃ³n anÃ³nima  \nval add3:(Int,Int)=>Int = _ + _ // otra forma\nval add4 = (_ + _):(Int,Int)=>Int //otra forma mÃ¡s   \n\nprintln(add1(42,13))\nprintln(add2(42,13))\nprintln(add3(42,13))\nprintln(add4(42,13))\n\nval add5 = add1 _ // Convierte mÃ©todo en funciÃ³n\ndef add6(x:Int, y:Int) = add2(x,y)  // Convierte funciÃ³n en mÃ©todo\n\nprintln(add5(42,13),add6(42,13))","user":"anonymous","dateUpdated":"2017-08-19T13:53:05-0300","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":false,"colWidth":6,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nadd1: (x: Int, y: Int)Int\n\nadd2: (Int, Int) => Int = <function2>\n\nadd3: (Int, Int) => Int = <function2>\n\nadd4: (Int, Int) => Int = <function2>\n55\n55\n55\n55\n\nadd5: (Int, Int) => Int = <function2>\n\nadd6: (x: Int, y: Int)Int\n(55,55)\n"}]},"apps":[],"jobName":"paragraph_1502984910654_1666680128","id":"20160623-200215_54822284","dateCreated":"2017-08-17T12:48:30-0300","dateStarted":"2017-08-19T13:53:05-0300","dateFinished":"2017-08-19T13:53:06-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:280"},{"title":"Ejemplos","text":"%md\n* El primer ejemplo (`add1`) define un funciÃ³n como ya vimos\n* El segundo es como en el ejemplo anterior solo que asignando la funciÃ³n a una variable. Esto hace que se le ponga un nombre a la funciÃ³n anÃ³nima (`add2`)\n* El tercer y cuarto ejemplo usa los guiones bajos (`_`) como ya vimos. Esta forma es poco usada en `scala` cuando se definen funciones. Se usa frecuentemente cuando la funciÃ³n anÃ³nima se pasa como parÃ¡metro (alto orden).\n* DespuÃ©s de ejecutar este ejemplo compare los tipos de las funciones `add1` y las demÃ¡s. \n* En `scala` las funciones y los mÃ©todos no son lo mismo pero se pueden convertir (ver `add5` y `add6`). \n","dateUpdated":"2017-08-17T12:48:30-0300","config":{"enabled":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":6,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<ul>\n<li>El primer ejemplo (<code>add1</code>) define un funciÃ³n como ya vimos</li>\n<li>El segundo es como en el ejemplo anterior solo que asignando la funciÃ³n a una variable. Esto hace que se le ponga un nombre a la funciÃ³n anÃ³nima (<code>add2</code>)</li>\n<li>El tercer y cuarto ejemplo usa los guiones bajos (<code>_</code>) como ya vimos. Esta forma es poco usada en <code>scala</code> cuando se definen funciones. Se usa frecuentemente cuando la funciÃ³n anÃ³nima se pasa como parÃ¡metro (alto orden).</li>\n<li>DespuÃ©s de ejecutar este ejemplo compare los tipos de las funciones <code>add1</code> y las demÃ¡s.</li>\n<li>Como ya se mencionÃ³ en <code>scala</code> las funciones y los mÃ©todos no son lo mismo pero se pueden convertir (ver <code>add5</code> y <code>add6</code>).</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1502984910654_1666680128","id":"20160623-200215_1324927078","dateCreated":"2017-08-17T12:48:30-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:281"},{"title":"Cosas que te pueden interesar","text":"%md \n* [Scala Functions vs Methods](http://jim-mcbeath.blogspot.com.ar/2009/05/scala-functions-vs-methods.html).\n* [Functional Scala: Turning Methods into Functions (or WTF is eta expansion?)](https://gleichmann.wordpress.com/2011/01/09/functional-scala-turning-methods-into-functions/).\n*  [MÃ¡s sobre funciones anÃ³nimas](http://docs.scala-lang.org/tutorials/tour/anonymous-function-syntax.html).","dateUpdated":"2017-08-17T12:48:30-0300","config":{"enabled":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<ul>\n<li><a href=\"http://jim-mcbeath.blogspot.com.ar/2009/05/scala-functions-vs-methods.html\">Scala Functions vs Methods</a>.</li>\n<li><a href=\"https://gleichmann.wordpress.com/2011/01/09/functional-scala-turning-methods-into-functions/\">Functional Scala: Turning Methods into Functions (or WTF is eta expansion?)</a>.</li>\n<li><a href=\"http://docs.scala-lang.org/tutorials/tour/anonymous-function-syntax.html\">MÃ¡s sobre funciones anÃ³nimas</a>.</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1502984910655_1666295379","id":"20160817-003508_150760482","dateCreated":"2017-08-17T12:48:30-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:282"},{"text":"%md ##Estructuras de Control","dateUpdated":"2017-08-17T12:48:30-0300","config":{"enabled":false,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Estructuras de Control</h2>\n"}]},"apps":[],"jobName":"paragraph_1502984910656_1652059669","id":"20160623-200215_23879145","dateCreated":"2017-08-17T12:48:30-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:283"},{"title":"While","text":"%md &nbsp;\n- `scala` tiene la sentencia `while` para crear bucles. \n- No tiene el *clÃ¡sico* bucle `for` de C, Java, Fortran, etc.\n- `scala` no tiene por defecto los operadores de decremento `--` e incremento `++` pero se pueden usar los operadores `-=` y `+=` para hacer lo mismo.","dateUpdated":"2017-08-17T12:48:30-0300","config":{"enabled":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":6,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>&nbsp;</p>\n<ul>\n<li><code>scala</code> tiene la sentencia <code>while</code> para crear bucles.</li>\n<li>No tiene el <em>clÃ¡sico</em> bucle <code>for</code> de C, Java, Fortran, etc.</li>\n<li><code>scala</code> no tiene por defecto los operadores de decremento <code>--</code> e incremento <code>++</code> pero se pueden usar los operadores <code>-=</code> y <code>+=</code> para hacer lo mismo.</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1502984910656_1652059669","id":"20160623-200215_838802559","dateCreated":"2017-08-17T12:48:30-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:284"},{"title":"While","text":"var i, sum = 0  \nwhile ( i < 10) {  \n  sum += i  \n  i+=1  \n}  \nprintln(sum)\n","dateUpdated":"2017-08-19T14:02:49-0300","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":false,"colWidth":6,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1502984910657_1651674921","id":"20160623-200215_1076609123","dateCreated":"2017-08-17T12:48:30-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:285","user":"anonymous","dateFinished":"2017-08-19T14:02:49-0300","dateStarted":"2017-08-19T14:02:49-0300","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n\ni: Int = 0\nsum: Int = 0\n45\n"}]}},{"title":"For","text":"%md &nbsp;\n- `scala` tiene una sentencia `for` distinta que la de los lenguajes C, Java, etc. con la cual se puede simular la de estos lenguajes.\n- La sentencia `for` es en realidad muy poderosa. \n- En el siguiente ejemplo la sentencia `for` toma los posibles valores de la variable `i` de una secuencia (ya lo vimos).\n- Para mÃ¡s informaciÃ³n ver: [Bucles en Scala](http://www.tutorialspoint.com/scala/scala_for_loop.htm).","dateUpdated":"2017-08-17T12:48:30-0300","config":{"enabled":false,"title":true,"tableHide":false,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":6,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>&nbsp;</p>\n<ul>\n<li><code>scala</code> tiene una sentencia <code>for</code> distinta que la de los lenguajes C, Java, etc. con la cual se puede simular la de estos lenguajes.</li>\n<li>La sentencia <code>for</code> es en realidad muy poderosa.</li>\n<li>En el siguiente ejemplo la sentencia <code>for</code> toma los posibles valores de la variable <code>i</code> de una secuencia (ya lo vimos).</li>\n<li>Para mÃ¡s informaciÃ³n ver: <a href=\"http://www.tutorialspoint.com/scala/scala_for_loop.htm\">Bucles en Scala</a>.</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1502984910658_1652829167","id":"20160623-200215_1753481700","dateCreated":"2017-08-17T12:48:30-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:286"},{"title":"For","text":"var sum = 0  \nfor ( i <- 0 until 10) {\n  sum += i  \n}  \nprintln(sum)\n\nfor (i <- List(1,2,3)) println(i)\n\n","user":"anonymous","dateUpdated":"2017-08-19T14:02:53-0300","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":false,"colWidth":6,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nsum: Int = 0\n45\n1\n2\n3\n"}]},"apps":[],"jobName":"paragraph_1502984910659_1652444418","id":"20160623-200215_567407727","dateCreated":"2017-08-17T12:48:30-0300","dateStarted":"2017-08-19T14:02:53-0300","dateFinished":"2017-08-19T14:02:54-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:287"},{"title":"Bucles implÃ­citos","text":"%md &nbsp;\n- En `scala` se pueden definir bucles de manera funcional (declarativa) aprovechando los mÃ©todos propios de las secuencias<sep>1</sep>, como `sum` en el siguiente ejemplo.\n\n- Los mÃ©todos para secuencias pueden encontrarse en [API GenTraversableOnce](http://www.scala-lang.org/api/current/index.html#scala.collection.GenTraversableOnce).","dateUpdated":"2017-08-17T12:48:30-0300","config":{"enabled":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":6,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>&nbsp;</p>\n<ul>\n<li><p>En <code>scala</code> se pueden definir bucles de manera funcional (declarativa) aprovechando los mÃ©todos propios de las secuencias<sep>1</sep>, como <code>sum</code> en el siguiente ejemplo.</p>\n</li>\n<li><p>Los mÃ©todos para secuencias pueden encontrarse en <a href=\"http://www.scala-lang.org/api/current/index.html#scala.collection.GenTraversableOnce\">API GenTraversableOnce</a>.</p>\n</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1502984910659_1652444418","id":"20160623-200215_249693191","dateCreated":"2017-08-17T12:48:30-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:288"},{"title":"Bucles ImplÃ­citos","text":"(0 until 10).sum\n(1 until 10 by 2).product\n\n\n","dateUpdated":"2017-08-19T14:02:57-0300","config":{"enabled":true,"title":true,"tableHide":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":false,"colWidth":6,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1502984910660_1650520674","id":"20160623-200215_540994360","dateCreated":"2017-08-17T12:48:30-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:289","user":"anonymous","dateFinished":"2017-08-19T14:02:57-0300","dateStarted":"2017-08-19T14:02:57-0300","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres45: Int = 45\n\nres46: Int = 945\n"}]}},{"title":"If","text":"%md \n- Los `if`'s funcionan igual que en todos los lenguajes.\n- En `scala` todas las construcciones son expresiones, inclusive las sentencias `if`.","dateUpdated":"2017-08-17T12:48:30-0300","config":{"enabled":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":6,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<ul>\n<li>Los <code>if</code>'s funcionan igual que en todos los lenguajes.</li>\n<li>En <code>scala</code> todas las construcciones son expresiones, inclusive las sentencias <code>if</code>.</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1502984910661_1650135925","id":"20160623-200215_1820589274","dateCreated":"2017-08-17T12:48:30-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:290"},{"title":"If","text":"if (true)   \n  println(\"no son necesarias la llavaes con una sola sentencia\")  \n\nif (1 + 1 == 2) {  \n  println(\"multiples\")  \n  println(\"sentencias\")  \n  println(\"requieren\")  \n  println(\"llaves\")  \n} else {  \n  println(\"la matemÃ¡tica estÃ¡ equivocada!\")  \n  println(\"o su computadora se volciÃ³ loca\")  \n}  \n\nval vegano = false  \nval almuerzo =  if (vegano) \"lechuga\" else \"choripan\"  \n\nprintln(almuerzo)  ","dateUpdated":"2017-08-19T14:04:02-0300","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":false,"colWidth":6,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1502984910662_1651290172","id":"20160623-200215_1927221105","dateCreated":"2017-08-17T12:48:30-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:291","user":"anonymous","dateFinished":"2017-08-19T14:04:03-0300","dateStarted":"2017-08-19T14:04:02-0300","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"no son necesarias la llavaes con una sola sentencia\nmultiples\nsentencias\nrequieren\nllaves\n\nvegano: Boolean = false\n\nalmuerzo: String = choripan\nchoripan\n"}]}},{"text":"%md ##Operaciones Ãºtiles\n\nA continuaciÃ³n veremos algunos ejemplos de diferentes operaciones que resultan muy Ãºtiles en `scala`. Experimenta con los ejemplos. Algunos conceptos que aparecen van a ser explicados despuÃ©s.","dateUpdated":"2017-08-17T12:48:30-0300","config":{"enabled":false,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Operaciones Ãºtiles</h2>\n<p>A continuaciÃ³n veremos algunos ejemplos de diferentes operaciones que resultan muy Ãºtiles en <code>scala</code>. Experimenta con los ejemplos. Algunos conceptos que aparecen van a ser explicados despuÃ©s.</p>\n"}]},"apps":[],"jobName":"paragraph_1502984910662_1651290172","id":"20160623-200215_1819320049","dateCreated":"2017-08-17T12:48:30-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:292"},{"title":"Imprimir en Pantalla","text":"%md \n- Scala tiene un *shortcut* al `Sistem.out.println` de Java como asÃ­ tambiÃ©n `print`, `printf`, etc.\n- Se puede usar `printf`. Ver [Printf cheat sheet](http://alvinalexander.com/programming/printf-format-cheat-sheet).\n- Todas estÃ¡n definidas en una clase que se importa por defecto (`scala.Predef`). \n\n- Para mÃ¡s informaciÃ³n ver: [scala.Predef](http://www.scala-lang.org/api/current/index.html#scala.Predef$).","dateUpdated":"2017-08-17T12:48:30-0300","config":{"enabled":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":6,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<ul>\n<li><p>Scala tiene un <em>shortcut</em> al <code>Sistem.out.println</code> de Java como asÃ­ tambiÃ©n <code>print</code>, <code>printf</code>, etc.</p>\n</li>\n<li><p>Se puede usar <code>printf</code>. Ver <a href=\"http://alvinalexander.com/programming/printf-format-cheat-sheet\">Printf cheat sheet</a>.</p>\n</li>\n<li><p>Todas estÃ¡n definidas en una clase que se importa por defecto (<code>scala.Predef</code>).</p>\n</li>\n<li><p>Para mÃ¡s informaciÃ³n ver: <a href=\"http://www.scala-lang.org/api/current/index.html#scala.Predef$\">scala.Predef</a>.</p>\n</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1502984910663_1650905423","id":"20160623-200215_1667859618","dateCreated":"2017-08-17T12:48:30-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:293"},{"title":"Imprimir en pantalla","text":"\n//usando println\nprintln(\"Hola mundo\")\n\n//usando printf\nprintf(\"El nÃºmero que le sigue a 2 es %.16f (casi).\", Math.nextAfter(2.0, 3))\n\n","dateUpdated":"2017-08-19T14:04:24-0300","config":{"enabled":true,"title":true,"tableHide":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":false,"colWidth":6,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1502984910664_1648981678","id":"20160623-200215_810868533","dateCreated":"2017-08-17T12:48:30-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:294","user":"anonymous","dateFinished":"2017-08-19T14:04:24-0300","dateStarted":"2017-08-19T14:04:24-0300","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Hola mundo\nEl nÃºmero que le sigue a 2 es 2,0000000000000004 (casi)."}]}},{"title":"InterpolaciÃ³n de Strings","text":"%md \n- Es un mecanismo que permite embeber valores de variables dentro de un string.\n- Se indica mediante una `s` delante de la primer comilla del string.\n- TambiÃ©n se pueden embeber expresiones mÃ¡s compejas encerrÃ¡ndolas entre llaves:\n\n- Para mÃ¡s informaciÃ³n ver: [String interpolation in Scala](http://docs.scala-lang.org/overviews/core/string-interpolation.html).","dateUpdated":"2017-08-17T12:48:30-0300","config":{"enabled":false,"title":true,"tableHide":false,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":6,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<ul>\n<li><p>Es un mecanismo que permite embeber valores de variables dentro de un string.</p>\n</li>\n<li><p>Se indica mediante una <code>s</code> delante de la primer comilla del string.</p>\n</li>\n<li><p>TambiÃ©n se pueden embeber expresiones mÃ¡s compejas encerrÃ¡ndolas entre llaves:</p>\n</li>\n<li><p>Para mÃ¡s informaciÃ³n ver: <a href=\"http://docs.scala-lang.org/overviews/core/string-interpolation.html\">String interpolation in Scala</a>.</p>\n</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1502984910664_1648981678","id":"20160623-200215_439954318","dateCreated":"2017-08-17T12:48:30-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:295"},{"title":"InterpolaciÃ³n de Strings","text":"import scala.math._  \nval dosPi = Pi*2\nprintln(s\"Dame $dosPi zas\")\nprintln(s\"Mejor dame ${4 * Pi} zas\")\n","dateUpdated":"2017-08-19T14:10:56-0300","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":false,"colWidth":6,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1502984910665_1648596929","id":"20160623-200215_903540991","dateCreated":"2017-08-17T12:48:30-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:296","user":"anonymous","dateFinished":"2017-08-19T14:10:56-0300","dateStarted":"2017-08-19T14:10:56-0300","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nimport scala.math._\n\ndosPi: Double = 6.283185307179586\nDame 6.283185307179586 zas\nMejor dame 12.566370614359172 zas\n"}]}},{"title":"Rangos","text":"//crea un range entre 1 y 10 inclusive \nval range = 1 to 10   \n//crea un range entre 1 y 10 excluyÃ©ndolo   \nval range2 = 1 until 10   \n//desde 2 a 10 saltando de a 3  \nval range3 = 2 until 10 by 3   \n// Convierte a lista\nprintln(range3.toList)  ","dateUpdated":"2017-08-19T14:11:25-0300","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":false,"colWidth":6,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1502984910665_1648596929","id":"20160623-200215_1180409461","dateCreated":"2017-08-17T12:48:30-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:297","user":"anonymous","dateFinished":"2017-08-19T14:11:26-0300","dateStarted":"2017-08-19T14:11:25-0300","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nrange: scala.collection.immutable.Range.Inclusive = Range(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\nrange2: scala.collection.immutable.Range = Range(1, 2, 3, 4, 5, 6, 7, 8, 9)\n\nrange3: scala.collection.immutable.Range = Range(2, 5, 8)\nList(2, 5, 8)\n"}]}},{"title":"NÃºmeros","text":"val num = -5  \nval numAbs = num.abs //valor absoluto  \nval max5or7 = numAbs.max(7)  \nval min5or7 = numAbs.min(7)  \nprintln(numAbs) \nprintln(max5or7)   \nprintln(min5or7)   \n","dateUpdated":"2017-08-19T14:12:11-0300","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":false,"colWidth":6,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1502984910666_1649751176","id":"20160623-200215_1422775772","dateCreated":"2017-08-17T12:48:30-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:298","user":"anonymous","dateFinished":"2017-08-19T14:12:11-0300","dateStarted":"2017-08-19T14:12:11-0300","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nnum: Int = -5\n\nnumAbs: Int = 5\n\nmax5or7: Int = 7\n\nmin5or7: Int = 5\n5\n7\n5\n"}]}},{"title":"Operaciones sobre Strings","text":"val reverse = \"Scala\".reverse //da vuelta el string   \nprintln(reverse)\n\nval cap = \"scala\".capitalize //Pone primera letra en mayÃºscula  \nprintln(cap)\n\nval multi = \"Scala!\" * 7 //repite n veces   \nprintln(multi)\n\nval int = \"123\".toInt //parsea a Int  \nprintln(int)  ","dateUpdated":"2017-08-19T14:12:30-0300","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":false,"colWidth":6,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1502984910667_1649366427","id":"20160623-200215_614757432","dateCreated":"2017-08-17T12:48:30-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:299","user":"anonymous","dateFinished":"2017-08-19T14:12:31-0300","dateStarted":"2017-08-19T14:12:30-0300","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nreverse: String = alacS\nalacS\n\ncap: String = Scala\nScala\n\nmulti: String = Scala!Scala!Scala!Scala!Scala!Scala!Scala!\nScala!Scala!Scala!Scala!Scala!Scala!Scala!\n\nint: Int = 123\n123\n"}]}},{"title":"Operaciones sobre Secuencias","text":"val range = (1 to 10).toList   \n//filter - deja solo los elementos mas grandes que 4   \nval moreThan4 = range.filter(_ > 4)  \nprintln(moreThan4)\n\n//map - transforma cada elemento de la secuencia\nval doubleIt = range2.map(_ * 2)  \nprintln(doubleIt)   ","dateUpdated":"2017-08-19T14:14:27-0300","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":false,"colWidth":6,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1502984910667_1649366427","id":"20160623-200215_1288429899","dateCreated":"2017-08-17T12:48:30-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:300","user":"anonymous","dateFinished":"2017-08-19T14:14:28-0300","dateStarted":"2017-08-19T14:14:27-0300","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nrange: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\nmoreThan4: List[Int] = List(5, 6, 7, 8, 9, 10)\nList(5, 6, 7, 8, 9, 10)\n\ndoubleIt: scala.collection.immutable.IndexedSeq[Int] = Vector(2, 4, 6, 8, 10, 12, 14, 16, 18)\nVector(2, 4, 6, 8, 10, 12, 14, 16, 18)\n"}]}},{"text":"println(\"\"\"%html\n<script>\n    var heads = document.getElementsByTagName('h2');\n    var numHeads = heads.length;\n    var inner = \"\";\n    var i = 0;\n    var j = 0;\n    while (i < numHeads){\n        inner = heads[i].innerHTML;\n        heads[i].innerHTML = (i+1) + \".- \" + inner;\n        i++\n    }\n</script>\n\"\"\")","dateUpdated":"2017-08-17T12:48:30-0300","config":{"enabled":false,"tableHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"editorMode":"ace/mode/scala","editorHide":true,"colWidth":12,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<script>\n    var heads = document.getElementsByTagName('h2');\n    var numHeads = heads.length;\n    var inner = \"\";\n    var i = 0;\n    var j = 0;\n    while (i < numHeads){\n        inner = heads[i].innerHTML;\n        heads[i].innerHTML = (i+1) + \".- \" + inner;\n        i++\n    }\n</script>\n\n"}]},"apps":[],"jobName":"paragraph_1502984910668_1647442683","id":"20160623-200215_1294174914","dateCreated":"2017-08-17T12:48:30-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:301"},{"dateUpdated":"2017-08-17T12:48:30-0300","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":false,"colWidth":12,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1502984910668_1647442683","id":"20160623-233442_1133997844","dateCreated":"2017-08-17T12:48:30-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:302"}],"name":"Tutorial Scala parte 1","id":"2CQPPE9U3","angularObjects":{"2CRBJ1TRK:shared_process":[],"2CQ6E5PGQ:shared_process":[],"2CRKEY1QU:shared_process":[],"2CRUJFVZ8:shared_process":[],"2CS97UD25:shared_process":[],"2CQXJMN8C:shared_process":[],"2CPYT3M2U:shared_process":[],"2CSHR5Z2N:shared_process":[],"2CSAYAARD:shared_process":[],"2CQYNJRPB:shared_process":[],"2CSRCJNV5:shared_process":[],"2CQNUZHKK:shared_process":[],"2CQYHV85D:shared_process":[],"2CQ67YZNF:shared_process":[],"2CQ84C23F:shared_process":[],"2CSMN7B9W:shared_process":[],"2CPTEBNRV:shared_process":[],"2CS6Z5AX2:shared_process":[],"2CRCN644M:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}